// This file was generated by counterfeiter
package fakes

import (
	"sync"
	"time"

	apiv1beta1 "github.com/kubernetes-incubator/service-catalog/pkg/apis/servicecatalog/v1beta1"
	"github.com/kubernetes-incubator/service-catalog/pkg/svcat/service-catalog"
	apicorev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/version"
)

type FakeSvcatAPI struct {
	BindStub        func(string, string, string, string, string, interface{}, map[string]string) (*apiv1beta1.ServiceBinding, error)
	bindMutex       sync.RWMutex
	bindArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
		arg5 string
		arg6 interface{}
		arg7 map[string]string
	}
	bindReturns struct {
		result1 *apiv1beta1.ServiceBinding
		result2 error
	}
	BindingParentHierarchyStub        func(*apiv1beta1.ServiceBinding) (*apiv1beta1.ServiceInstance, *apiv1beta1.ClusterServiceClass, *apiv1beta1.ClusterServicePlan, *apiv1beta1.ClusterServiceBroker, error)
	bindingParentHierarchyMutex       sync.RWMutex
	bindingParentHierarchyArgsForCall []struct {
		arg1 *apiv1beta1.ServiceBinding
	}
	bindingParentHierarchyReturns struct {
		result1 *apiv1beta1.ServiceInstance
		result2 *apiv1beta1.ClusterServiceClass
		result3 *apiv1beta1.ClusterServicePlan
		result4 *apiv1beta1.ClusterServiceBroker
		result5 error
	}
	DeleteBindingStub        func(string, string) error
	deleteBindingMutex       sync.RWMutex
	deleteBindingArgsForCall []struct {
		arg1 string
		arg2 string
	}
	deleteBindingReturns struct {
		result1 error
	}
	DeleteBindingsStub        func([]types.NamespacedName) ([]types.NamespacedName, error)
	deleteBindingsMutex       sync.RWMutex
	deleteBindingsArgsForCall []struct {
		arg1 []types.NamespacedName
	}
	deleteBindingsReturns struct {
		result1 []types.NamespacedName
		result2 error
	}
	IsBindingFailedStub        func(*apiv1beta1.ServiceBinding) bool
	isBindingFailedMutex       sync.RWMutex
	isBindingFailedArgsForCall []struct {
		arg1 *apiv1beta1.ServiceBinding
	}
	isBindingFailedReturns struct {
		result1 bool
	}
	IsBindingReadyStub        func(*apiv1beta1.ServiceBinding) bool
	isBindingReadyMutex       sync.RWMutex
	isBindingReadyArgsForCall []struct {
		arg1 *apiv1beta1.ServiceBinding
	}
	isBindingReadyReturns struct {
		result1 bool
	}
	RetrieveBindingStub        func(string, string) (*apiv1beta1.ServiceBinding, error)
	retrieveBindingMutex       sync.RWMutex
	retrieveBindingArgsForCall []struct {
		arg1 string
		arg2 string
	}
	retrieveBindingReturns struct {
		result1 *apiv1beta1.ServiceBinding
		result2 error
	}
	RetrieveBindingsStub        func(string) (*apiv1beta1.ServiceBindingList, error)
	retrieveBindingsMutex       sync.RWMutex
	retrieveBindingsArgsForCall []struct {
		arg1 string
	}
	retrieveBindingsReturns struct {
		result1 *apiv1beta1.ServiceBindingList
		result2 error
	}
	RetrieveBindingsByInstanceStub        func(*apiv1beta1.ServiceInstance) ([]apiv1beta1.ServiceBinding, error)
	retrieveBindingsByInstanceMutex       sync.RWMutex
	retrieveBindingsByInstanceArgsForCall []struct {
		arg1 *apiv1beta1.ServiceInstance
	}
	retrieveBindingsByInstanceReturns struct {
		result1 []apiv1beta1.ServiceBinding
		result2 error
	}
	UnbindStub        func(string, string) ([]types.NamespacedName, error)
	unbindMutex       sync.RWMutex
	unbindArgsForCall []struct {
		arg1 string
		arg2 string
	}
	unbindReturns struct {
		result1 []types.NamespacedName
		result2 error
	}
	WaitForBindingStub        func(string, string, time.Duration, *time.Duration) (*apiv1beta1.ServiceBinding, error)
	waitForBindingMutex       sync.RWMutex
	waitForBindingArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 time.Duration
		arg4 *time.Duration
	}
	waitForBindingReturns struct {
		result1 *apiv1beta1.ServiceBinding
		result2 error
	}
	DeregisterStub        func(string) error
	deregisterMutex       sync.RWMutex
	deregisterArgsForCall []struct {
		arg1 string
	}
	deregisterReturns struct {
		result1 error
	}
	RetrieveBrokersStub        func() ([]apiv1beta1.ClusterServiceBroker, error)
	retrieveBrokersMutex       sync.RWMutex
	retrieveBrokersArgsForCall []struct{}
	retrieveBrokersReturns struct {
		result1 []apiv1beta1.ClusterServiceBroker
		result2 error
	}
	RetrieveBrokerStub        func(string) (*apiv1beta1.ClusterServiceBroker, error)
	retrieveBrokerMutex       sync.RWMutex
	retrieveBrokerArgsForCall []struct {
		arg1 string
	}
	retrieveBrokerReturns struct {
		result1 *apiv1beta1.ClusterServiceBroker
		result2 error
	}
	RetrieveBrokerByClassStub        func(*apiv1beta1.ClusterServiceClass) (*apiv1beta1.ClusterServiceBroker, error)
	retrieveBrokerByClassMutex       sync.RWMutex
	retrieveBrokerByClassArgsForCall []struct {
		arg1 *apiv1beta1.ClusterServiceClass
	}
	retrieveBrokerByClassReturns struct {
		result1 *apiv1beta1.ClusterServiceBroker
		result2 error
	}
	RegisterStub        func(string, string) (*apiv1beta1.ClusterServiceBroker, error)
	registerMutex       sync.RWMutex
	registerArgsForCall []struct {
		arg1 string
		arg2 string
	}
	registerReturns struct {
		result1 *apiv1beta1.ClusterServiceBroker
		result2 error
	}
	SyncStub        func(string, int) error
	syncMutex       sync.RWMutex
	syncArgsForCall []struct {
		arg1 string
		arg2 int
	}
	syncReturns struct {
		result1 error
	}
	RetrieveClassesStub        func() ([]apiv1beta1.ClusterServiceClass, error)
	retrieveClassesMutex       sync.RWMutex
	retrieveClassesArgsForCall []struct{}
	retrieveClassesReturns struct {
		result1 []apiv1beta1.ClusterServiceClass
		result2 error
	}
	RetrieveClassByNameStub        func(string) (*apiv1beta1.ClusterServiceClass, error)
	retrieveClassByNameMutex       sync.RWMutex
	retrieveClassByNameArgsForCall []struct {
		arg1 string
	}
	retrieveClassByNameReturns struct {
		result1 *apiv1beta1.ClusterServiceClass
		result2 error
	}
	RetrieveClassByIDStub        func(string) (*apiv1beta1.ClusterServiceClass, error)
	retrieveClassByIDMutex       sync.RWMutex
	retrieveClassByIDArgsForCall []struct {
		arg1 string
	}
	retrieveClassByIDReturns struct {
		result1 *apiv1beta1.ClusterServiceClass
		result2 error
	}
	RetrieveClassByPlanStub        func(*apiv1beta1.ClusterServicePlan) (*apiv1beta1.ClusterServiceClass, error)
	retrieveClassByPlanMutex       sync.RWMutex
	retrieveClassByPlanArgsForCall []struct {
		arg1 *apiv1beta1.ClusterServicePlan
	}
	retrieveClassByPlanReturns struct {
		result1 *apiv1beta1.ClusterServiceClass
		result2 error
	}
	DeprovisionStub        func(string, string) error
	deprovisionMutex       sync.RWMutex
	deprovisionArgsForCall []struct {
		arg1 string
		arg2 string
	}
	deprovisionReturns struct {
		result1 error
	}
	InstanceParentHierarchyStub        func(*apiv1beta1.ServiceInstance) (*apiv1beta1.ClusterServiceClass, *apiv1beta1.ClusterServicePlan, *apiv1beta1.ClusterServiceBroker, error)
	instanceParentHierarchyMutex       sync.RWMutex
	instanceParentHierarchyArgsForCall []struct {
		arg1 *apiv1beta1.ServiceInstance
	}
	instanceParentHierarchyReturns struct {
		result1 *apiv1beta1.ClusterServiceClass
		result2 *apiv1beta1.ClusterServicePlan
		result3 *apiv1beta1.ClusterServiceBroker
		result4 error
	}
	InstanceToServiceClassAndPlanStub        func(*apiv1beta1.ServiceInstance) (*apiv1beta1.ClusterServiceClass, *apiv1beta1.ClusterServicePlan, error)
	instanceToServiceClassAndPlanMutex       sync.RWMutex
	instanceToServiceClassAndPlanArgsForCall []struct {
		arg1 *apiv1beta1.ServiceInstance
	}
	instanceToServiceClassAndPlanReturns struct {
		result1 *apiv1beta1.ClusterServiceClass
		result2 *apiv1beta1.ClusterServicePlan
		result3 error
	}
	IsInstanceFailedStub        func(*apiv1beta1.ServiceInstance) bool
	isInstanceFailedMutex       sync.RWMutex
	isInstanceFailedArgsForCall []struct {
		arg1 *apiv1beta1.ServiceInstance
	}
	isInstanceFailedReturns struct {
		result1 bool
	}
	IsInstanceReadyStub        func(*apiv1beta1.ServiceInstance) bool
	isInstanceReadyMutex       sync.RWMutex
	isInstanceReadyArgsForCall []struct {
		arg1 *apiv1beta1.ServiceInstance
	}
	isInstanceReadyReturns struct {
		result1 bool
	}
	ProvisionStub        func(string, string, string, string, string, interface{}, map[string]string) (*apiv1beta1.ServiceInstance, error)
	provisionMutex       sync.RWMutex
	provisionArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
		arg5 string
		arg6 interface{}
		arg7 map[string]string
	}
	provisionReturns struct {
		result1 *apiv1beta1.ServiceInstance
		result2 error
	}
	RetrieveInstanceStub        func(string, string) (*apiv1beta1.ServiceInstance, error)
	retrieveInstanceMutex       sync.RWMutex
	retrieveInstanceArgsForCall []struct {
		arg1 string
		arg2 string
	}
	retrieveInstanceReturns struct {
		result1 *apiv1beta1.ServiceInstance
		result2 error
	}
	RetrieveInstanceByBindingStub        func(*apiv1beta1.ServiceBinding) (*apiv1beta1.ServiceInstance, error)
	retrieveInstanceByBindingMutex       sync.RWMutex
	retrieveInstanceByBindingArgsForCall []struct {
		arg1 *apiv1beta1.ServiceBinding
	}
	retrieveInstanceByBindingReturns struct {
		result1 *apiv1beta1.ServiceInstance
		result2 error
	}
	RetrieveInstancesStub        func(string, string, string) (*apiv1beta1.ServiceInstanceList, error)
	retrieveInstancesMutex       sync.RWMutex
	retrieveInstancesArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	retrieveInstancesReturns struct {
		result1 *apiv1beta1.ServiceInstanceList
		result2 error
	}
	RetrieveInstancesByPlanStub        func(*apiv1beta1.ClusterServicePlan) ([]apiv1beta1.ServiceInstance, error)
	retrieveInstancesByPlanMutex       sync.RWMutex
	retrieveInstancesByPlanArgsForCall []struct {
		arg1 *apiv1beta1.ClusterServicePlan
	}
	retrieveInstancesByPlanReturns struct {
		result1 []apiv1beta1.ServiceInstance
		result2 error
	}
	TouchInstanceStub        func(string, string, int) error
	touchInstanceMutex       sync.RWMutex
	touchInstanceArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 int
	}
	touchInstanceReturns struct {
		result1 error
	}
	WaitForInstanceStub        func(string, string, time.Duration, *time.Duration) (*apiv1beta1.ServiceInstance, error)
	waitForInstanceMutex       sync.RWMutex
	waitForInstanceArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 time.Duration
		arg4 *time.Duration
	}
	waitForInstanceReturns struct {
		result1 *apiv1beta1.ServiceInstance
		result2 error
	}
	RetrievePlansStub        func(*servicecatalog.FilterOptions) ([]apiv1beta1.ClusterServicePlan, error)
	retrievePlansMutex       sync.RWMutex
	retrievePlansArgsForCall []struct {
		arg1 *servicecatalog.FilterOptions
	}
	retrievePlansReturns struct {
		result1 []apiv1beta1.ClusterServicePlan
		result2 error
	}
	RetrievePlanByNameStub        func(string) (*apiv1beta1.ClusterServicePlan, error)
	retrievePlanByNameMutex       sync.RWMutex
	retrievePlanByNameArgsForCall []struct {
		arg1 string
	}
	retrievePlanByNameReturns struct {
		result1 *apiv1beta1.ClusterServicePlan
		result2 error
	}
	RetrievePlanByIDStub        func(string) (*apiv1beta1.ClusterServicePlan, error)
	retrievePlanByIDMutex       sync.RWMutex
	retrievePlanByIDArgsForCall []struct {
		arg1 string
	}
	retrievePlanByIDReturns struct {
		result1 *apiv1beta1.ClusterServicePlan
		result2 error
	}
	RetrievePlansByClassStub        func(*apiv1beta1.ClusterServiceClass) ([]apiv1beta1.ClusterServicePlan, error)
	retrievePlansByClassMutex       sync.RWMutex
	retrievePlansByClassArgsForCall []struct {
		arg1 *apiv1beta1.ClusterServiceClass
	}
	retrievePlansByClassReturns struct {
		result1 []apiv1beta1.ClusterServicePlan
		result2 error
	}
	RetrievePlanByClassAndPlanNamesStub        func(string, string) (*apiv1beta1.ClusterServicePlan, error)
	retrievePlanByClassAndPlanNamesMutex       sync.RWMutex
	retrievePlanByClassAndPlanNamesArgsForCall []struct {
		arg1 string
		arg2 string
	}
	retrievePlanByClassAndPlanNamesReturns struct {
		result1 *apiv1beta1.ClusterServicePlan
		result2 error
	}
	RetrieveSecretByBindingStub        func(*apiv1beta1.ServiceBinding) (*apicorev1.Secret, error)
	retrieveSecretByBindingMutex       sync.RWMutex
	retrieveSecretByBindingArgsForCall []struct {
		arg1 *apiv1beta1.ServiceBinding
	}
	retrieveSecretByBindingReturns struct {
		result1 *apicorev1.Secret
		result2 error
	}
	ServerVersionStub        func() (*version.Info, error)
	serverVersionMutex       sync.RWMutex
	serverVersionArgsForCall []struct{}
	serverVersionReturns struct {
		result1 *version.Info
		result2 error
	}
}

func (fake *FakeSvcatAPI) Bind(arg1 string, arg2 string, arg3 string, arg4 string, arg5 string, arg6 interface{}, arg7 map[string]string) (*apiv1beta1.ServiceBinding, error) {
	fake.bindMutex.Lock()
	fake.bindArgsForCall = append(fake.bindArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
		arg5 string
		arg6 interface{}
		arg7 map[string]string
	}{arg1, arg2, arg3, arg4, arg5, arg6, arg7})
	fake.bindMutex.Unlock()
	if fake.BindStub != nil {
		return fake.BindStub(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	} else {
		return fake.bindReturns.result1, fake.bindReturns.result2
	}
}

func (fake *FakeSvcatAPI) BindCallCount() int {
	fake.bindMutex.RLock()
	defer fake.bindMutex.RUnlock()
	return len(fake.bindArgsForCall)
}

func (fake *FakeSvcatAPI) BindArgsForCall(i int) (string, string, string, string, string, interface{}, map[string]string) {
	fake.bindMutex.RLock()
	defer fake.bindMutex.RUnlock()
	return fake.bindArgsForCall[i].arg1, fake.bindArgsForCall[i].arg2, fake.bindArgsForCall[i].arg3, fake.bindArgsForCall[i].arg4, fake.bindArgsForCall[i].arg5, fake.bindArgsForCall[i].arg6, fake.bindArgsForCall[i].arg7
}

func (fake *FakeSvcatAPI) BindReturns(result1 *apiv1beta1.ServiceBinding, result2 error) {
	fake.BindStub = nil
	fake.bindReturns = struct {
		result1 *apiv1beta1.ServiceBinding
		result2 error
	}{result1, result2}
}

func (fake *FakeSvcatAPI) BindingParentHierarchy(arg1 *apiv1beta1.ServiceBinding) (*apiv1beta1.ServiceInstance, *apiv1beta1.ClusterServiceClass, *apiv1beta1.ClusterServicePlan, *apiv1beta1.ClusterServiceBroker, error) {
	fake.bindingParentHierarchyMutex.Lock()
	fake.bindingParentHierarchyArgsForCall = append(fake.bindingParentHierarchyArgsForCall, struct {
		arg1 *apiv1beta1.ServiceBinding
	}{arg1})
	fake.bindingParentHierarchyMutex.Unlock()
	if fake.BindingParentHierarchyStub != nil {
		return fake.BindingParentHierarchyStub(arg1)
	} else {
		return fake.bindingParentHierarchyReturns.result1, fake.bindingParentHierarchyReturns.result2, fake.bindingParentHierarchyReturns.result3, fake.bindingParentHierarchyReturns.result4, fake.bindingParentHierarchyReturns.result5
	}
}

func (fake *FakeSvcatAPI) BindingParentHierarchyCallCount() int {
	fake.bindingParentHierarchyMutex.RLock()
	defer fake.bindingParentHierarchyMutex.RUnlock()
	return len(fake.bindingParentHierarchyArgsForCall)
}

func (fake *FakeSvcatAPI) BindingParentHierarchyArgsForCall(i int) *apiv1beta1.ServiceBinding {
	fake.bindingParentHierarchyMutex.RLock()
	defer fake.bindingParentHierarchyMutex.RUnlock()
	return fake.bindingParentHierarchyArgsForCall[i].arg1
}

func (fake *FakeSvcatAPI) BindingParentHierarchyReturns(result1 *apiv1beta1.ServiceInstance, result2 *apiv1beta1.ClusterServiceClass, result3 *apiv1beta1.ClusterServicePlan, result4 *apiv1beta1.ClusterServiceBroker, result5 error) {
	fake.BindingParentHierarchyStub = nil
	fake.bindingParentHierarchyReturns = struct {
		result1 *apiv1beta1.ServiceInstance
		result2 *apiv1beta1.ClusterServiceClass
		result3 *apiv1beta1.ClusterServicePlan
		result4 *apiv1beta1.ClusterServiceBroker
		result5 error
	}{result1, result2, result3, result4, result5}
}

func (fake *FakeSvcatAPI) DeleteBinding(arg1 string, arg2 string) error {
	fake.deleteBindingMutex.Lock()
	fake.deleteBindingArgsForCall = append(fake.deleteBindingArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.deleteBindingMutex.Unlock()
	if fake.DeleteBindingStub != nil {
		return fake.DeleteBindingStub(arg1, arg2)
	} else {
		return fake.deleteBindingReturns.result1
	}
}

func (fake *FakeSvcatAPI) DeleteBindingCallCount() int {
	fake.deleteBindingMutex.RLock()
	defer fake.deleteBindingMutex.RUnlock()
	return len(fake.deleteBindingArgsForCall)
}

func (fake *FakeSvcatAPI) DeleteBindingArgsForCall(i int) (string, string) {
	fake.deleteBindingMutex.RLock()
	defer fake.deleteBindingMutex.RUnlock()
	return fake.deleteBindingArgsForCall[i].arg1, fake.deleteBindingArgsForCall[i].arg2
}

func (fake *FakeSvcatAPI) DeleteBindingReturns(result1 error) {
	fake.DeleteBindingStub = nil
	fake.deleteBindingReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSvcatAPI) DeleteBindings(arg1 []types.NamespacedName) ([]types.NamespacedName, error) {
	fake.deleteBindingsMutex.Lock()
	fake.deleteBindingsArgsForCall = append(fake.deleteBindingsArgsForCall, struct {
		arg1 []types.NamespacedName
	}{arg1})
	fake.deleteBindingsMutex.Unlock()
	if fake.DeleteBindingsStub != nil {
		return fake.DeleteBindingsStub(arg1)
	} else {
		return fake.deleteBindingsReturns.result1, fake.deleteBindingsReturns.result2
	}
}

func (fake *FakeSvcatAPI) DeleteBindingsCallCount() int {
	fake.deleteBindingsMutex.RLock()
	defer fake.deleteBindingsMutex.RUnlock()
	return len(fake.deleteBindingsArgsForCall)
}

func (fake *FakeSvcatAPI) DeleteBindingsArgsForCall(i int) []types.NamespacedName {
	fake.deleteBindingsMutex.RLock()
	defer fake.deleteBindingsMutex.RUnlock()
	return fake.deleteBindingsArgsForCall[i].arg1
}

func (fake *FakeSvcatAPI) DeleteBindingsReturns(result1 []types.NamespacedName, result2 error) {
	fake.DeleteBindingsStub = nil
	fake.deleteBindingsReturns = struct {
		result1 []types.NamespacedName
		result2 error
	}{result1, result2}
}

func (fake *FakeSvcatAPI) IsBindingFailed(arg1 *apiv1beta1.ServiceBinding) bool {
	fake.isBindingFailedMutex.Lock()
	fake.isBindingFailedArgsForCall = append(fake.isBindingFailedArgsForCall, struct {
		arg1 *apiv1beta1.ServiceBinding
	}{arg1})
	fake.isBindingFailedMutex.Unlock()
	if fake.IsBindingFailedStub != nil {
		return fake.IsBindingFailedStub(arg1)
	} else {
		return fake.isBindingFailedReturns.result1
	}
}

func (fake *FakeSvcatAPI) IsBindingFailedCallCount() int {
	fake.isBindingFailedMutex.RLock()
	defer fake.isBindingFailedMutex.RUnlock()
	return len(fake.isBindingFailedArgsForCall)
}

func (fake *FakeSvcatAPI) IsBindingFailedArgsForCall(i int) *apiv1beta1.ServiceBinding {
	fake.isBindingFailedMutex.RLock()
	defer fake.isBindingFailedMutex.RUnlock()
	return fake.isBindingFailedArgsForCall[i].arg1
}

func (fake *FakeSvcatAPI) IsBindingFailedReturns(result1 bool) {
	fake.IsBindingFailedStub = nil
	fake.isBindingFailedReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeSvcatAPI) IsBindingReady(arg1 *apiv1beta1.ServiceBinding) bool {
	fake.isBindingReadyMutex.Lock()
	fake.isBindingReadyArgsForCall = append(fake.isBindingReadyArgsForCall, struct {
		arg1 *apiv1beta1.ServiceBinding
	}{arg1})
	fake.isBindingReadyMutex.Unlock()
	if fake.IsBindingReadyStub != nil {
		return fake.IsBindingReadyStub(arg1)
	} else {
		return fake.isBindingReadyReturns.result1
	}
}

func (fake *FakeSvcatAPI) IsBindingReadyCallCount() int {
	fake.isBindingReadyMutex.RLock()
	defer fake.isBindingReadyMutex.RUnlock()
	return len(fake.isBindingReadyArgsForCall)
}

func (fake *FakeSvcatAPI) IsBindingReadyArgsForCall(i int) *apiv1beta1.ServiceBinding {
	fake.isBindingReadyMutex.RLock()
	defer fake.isBindingReadyMutex.RUnlock()
	return fake.isBindingReadyArgsForCall[i].arg1
}

func (fake *FakeSvcatAPI) IsBindingReadyReturns(result1 bool) {
	fake.IsBindingReadyStub = nil
	fake.isBindingReadyReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeSvcatAPI) RetrieveBinding(arg1 string, arg2 string) (*apiv1beta1.ServiceBinding, error) {
	fake.retrieveBindingMutex.Lock()
	fake.retrieveBindingArgsForCall = append(fake.retrieveBindingArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.retrieveBindingMutex.Unlock()
	if fake.RetrieveBindingStub != nil {
		return fake.RetrieveBindingStub(arg1, arg2)
	} else {
		return fake.retrieveBindingReturns.result1, fake.retrieveBindingReturns.result2
	}
}

func (fake *FakeSvcatAPI) RetrieveBindingCallCount() int {
	fake.retrieveBindingMutex.RLock()
	defer fake.retrieveBindingMutex.RUnlock()
	return len(fake.retrieveBindingArgsForCall)
}

func (fake *FakeSvcatAPI) RetrieveBindingArgsForCall(i int) (string, string) {
	fake.retrieveBindingMutex.RLock()
	defer fake.retrieveBindingMutex.RUnlock()
	return fake.retrieveBindingArgsForCall[i].arg1, fake.retrieveBindingArgsForCall[i].arg2
}

func (fake *FakeSvcatAPI) RetrieveBindingReturns(result1 *apiv1beta1.ServiceBinding, result2 error) {
	fake.RetrieveBindingStub = nil
	fake.retrieveBindingReturns = struct {
		result1 *apiv1beta1.ServiceBinding
		result2 error
	}{result1, result2}
}

func (fake *FakeSvcatAPI) RetrieveBindings(arg1 string) (*apiv1beta1.ServiceBindingList, error) {
	fake.retrieveBindingsMutex.Lock()
	fake.retrieveBindingsArgsForCall = append(fake.retrieveBindingsArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.retrieveBindingsMutex.Unlock()
	if fake.RetrieveBindingsStub != nil {
		return fake.RetrieveBindingsStub(arg1)
	} else {
		return fake.retrieveBindingsReturns.result1, fake.retrieveBindingsReturns.result2
	}
}

func (fake *FakeSvcatAPI) RetrieveBindingsCallCount() int {
	fake.retrieveBindingsMutex.RLock()
	defer fake.retrieveBindingsMutex.RUnlock()
	return len(fake.retrieveBindingsArgsForCall)
}

func (fake *FakeSvcatAPI) RetrieveBindingsArgsForCall(i int) string {
	fake.retrieveBindingsMutex.RLock()
	defer fake.retrieveBindingsMutex.RUnlock()
	return fake.retrieveBindingsArgsForCall[i].arg1
}

func (fake *FakeSvcatAPI) RetrieveBindingsReturns(result1 *apiv1beta1.ServiceBindingList, result2 error) {
	fake.RetrieveBindingsStub = nil
	fake.retrieveBindingsReturns = struct {
		result1 *apiv1beta1.ServiceBindingList
		result2 error
	}{result1, result2}
}

func (fake *FakeSvcatAPI) RetrieveBindingsByInstance(arg1 *apiv1beta1.ServiceInstance) ([]apiv1beta1.ServiceBinding, error) {
	fake.retrieveBindingsByInstanceMutex.Lock()
	fake.retrieveBindingsByInstanceArgsForCall = append(fake.retrieveBindingsByInstanceArgsForCall, struct {
		arg1 *apiv1beta1.ServiceInstance
	}{arg1})
	fake.retrieveBindingsByInstanceMutex.Unlock()
	if fake.RetrieveBindingsByInstanceStub != nil {
		return fake.RetrieveBindingsByInstanceStub(arg1)
	} else {
		return fake.retrieveBindingsByInstanceReturns.result1, fake.retrieveBindingsByInstanceReturns.result2
	}
}

func (fake *FakeSvcatAPI) RetrieveBindingsByInstanceCallCount() int {
	fake.retrieveBindingsByInstanceMutex.RLock()
	defer fake.retrieveBindingsByInstanceMutex.RUnlock()
	return len(fake.retrieveBindingsByInstanceArgsForCall)
}

func (fake *FakeSvcatAPI) RetrieveBindingsByInstanceArgsForCall(i int) *apiv1beta1.ServiceInstance {
	fake.retrieveBindingsByInstanceMutex.RLock()
	defer fake.retrieveBindingsByInstanceMutex.RUnlock()
	return fake.retrieveBindingsByInstanceArgsForCall[i].arg1
}

func (fake *FakeSvcatAPI) RetrieveBindingsByInstanceReturns(result1 []apiv1beta1.ServiceBinding, result2 error) {
	fake.RetrieveBindingsByInstanceStub = nil
	fake.retrieveBindingsByInstanceReturns = struct {
		result1 []apiv1beta1.ServiceBinding
		result2 error
	}{result1, result2}
}

func (fake *FakeSvcatAPI) Unbind(arg1 string, arg2 string) ([]types.NamespacedName, error) {
	fake.unbindMutex.Lock()
	fake.unbindArgsForCall = append(fake.unbindArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.unbindMutex.Unlock()
	if fake.UnbindStub != nil {
		return fake.UnbindStub(arg1, arg2)
	} else {
		return fake.unbindReturns.result1, fake.unbindReturns.result2
	}
}

func (fake *FakeSvcatAPI) UnbindCallCount() int {
	fake.unbindMutex.RLock()
	defer fake.unbindMutex.RUnlock()
	return len(fake.unbindArgsForCall)
}

func (fake *FakeSvcatAPI) UnbindArgsForCall(i int) (string, string) {
	fake.unbindMutex.RLock()
	defer fake.unbindMutex.RUnlock()
	return fake.unbindArgsForCall[i].arg1, fake.unbindArgsForCall[i].arg2
}

func (fake *FakeSvcatAPI) UnbindReturns(result1 []types.NamespacedName, result2 error) {
	fake.UnbindStub = nil
	fake.unbindReturns = struct {
		result1 []types.NamespacedName
		result2 error
	}{result1, result2}
}

func (fake *FakeSvcatAPI) WaitForBinding(arg1 string, arg2 string, arg3 time.Duration, arg4 *time.Duration) (*apiv1beta1.ServiceBinding, error) {
	fake.waitForBindingMutex.Lock()
	fake.waitForBindingArgsForCall = append(fake.waitForBindingArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 time.Duration
		arg4 *time.Duration
	}{arg1, arg2, arg3, arg4})
	fake.waitForBindingMutex.Unlock()
	if fake.WaitForBindingStub != nil {
		return fake.WaitForBindingStub(arg1, arg2, arg3, arg4)
	} else {
		return fake.waitForBindingReturns.result1, fake.waitForBindingReturns.result2
	}
}

func (fake *FakeSvcatAPI) WaitForBindingCallCount() int {
	fake.waitForBindingMutex.RLock()
	defer fake.waitForBindingMutex.RUnlock()
	return len(fake.waitForBindingArgsForCall)
}

func (fake *FakeSvcatAPI) WaitForBindingArgsForCall(i int) (string, string, time.Duration, *time.Duration) {
	fake.waitForBindingMutex.RLock()
	defer fake.waitForBindingMutex.RUnlock()
	return fake.waitForBindingArgsForCall[i].arg1, fake.waitForBindingArgsForCall[i].arg2, fake.waitForBindingArgsForCall[i].arg3, fake.waitForBindingArgsForCall[i].arg4
}

func (fake *FakeSvcatAPI) WaitForBindingReturns(result1 *apiv1beta1.ServiceBinding, result2 error) {
	fake.WaitForBindingStub = nil
	fake.waitForBindingReturns = struct {
		result1 *apiv1beta1.ServiceBinding
		result2 error
	}{result1, result2}
}

func (fake *FakeSvcatAPI) Deregister(arg1 string) error {
	fake.deregisterMutex.Lock()
	fake.deregisterArgsForCall = append(fake.deregisterArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.deregisterMutex.Unlock()
	if fake.DeregisterStub != nil {
		return fake.DeregisterStub(arg1)
	} else {
		return fake.deregisterReturns.result1
	}
}

func (fake *FakeSvcatAPI) DeregisterCallCount() int {
	fake.deregisterMutex.RLock()
	defer fake.deregisterMutex.RUnlock()
	return len(fake.deregisterArgsForCall)
}

func (fake *FakeSvcatAPI) DeregisterArgsForCall(i int) string {
	fake.deregisterMutex.RLock()
	defer fake.deregisterMutex.RUnlock()
	return fake.deregisterArgsForCall[i].arg1
}

func (fake *FakeSvcatAPI) DeregisterReturns(result1 error) {
	fake.DeregisterStub = nil
	fake.deregisterReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSvcatAPI) RetrieveBrokers() ([]apiv1beta1.ClusterServiceBroker, error) {
	fake.retrieveBrokersMutex.Lock()
	fake.retrieveBrokersArgsForCall = append(fake.retrieveBrokersArgsForCall, struct{}{})
	fake.retrieveBrokersMutex.Unlock()
	if fake.RetrieveBrokersStub != nil {
		return fake.RetrieveBrokersStub()
	} else {
		return fake.retrieveBrokersReturns.result1, fake.retrieveBrokersReturns.result2
	}
}

func (fake *FakeSvcatAPI) RetrieveBrokersCallCount() int {
	fake.retrieveBrokersMutex.RLock()
	defer fake.retrieveBrokersMutex.RUnlock()
	return len(fake.retrieveBrokersArgsForCall)
}

func (fake *FakeSvcatAPI) RetrieveBrokersReturns(result1 []apiv1beta1.ClusterServiceBroker, result2 error) {
	fake.RetrieveBrokersStub = nil
	fake.retrieveBrokersReturns = struct {
		result1 []apiv1beta1.ClusterServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeSvcatAPI) RetrieveBroker(arg1 string) (*apiv1beta1.ClusterServiceBroker, error) {
	fake.retrieveBrokerMutex.Lock()
	fake.retrieveBrokerArgsForCall = append(fake.retrieveBrokerArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.retrieveBrokerMutex.Unlock()
	if fake.RetrieveBrokerStub != nil {
		return fake.RetrieveBrokerStub(arg1)
	} else {
		return fake.retrieveBrokerReturns.result1, fake.retrieveBrokerReturns.result2
	}
}

func (fake *FakeSvcatAPI) RetrieveBrokerCallCount() int {
	fake.retrieveBrokerMutex.RLock()
	defer fake.retrieveBrokerMutex.RUnlock()
	return len(fake.retrieveBrokerArgsForCall)
}

func (fake *FakeSvcatAPI) RetrieveBrokerArgsForCall(i int) string {
	fake.retrieveBrokerMutex.RLock()
	defer fake.retrieveBrokerMutex.RUnlock()
	return fake.retrieveBrokerArgsForCall[i].arg1
}

func (fake *FakeSvcatAPI) RetrieveBrokerReturns(result1 *apiv1beta1.ClusterServiceBroker, result2 error) {
	fake.RetrieveBrokerStub = nil
	fake.retrieveBrokerReturns = struct {
		result1 *apiv1beta1.ClusterServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeSvcatAPI) RetrieveBrokerByClass(arg1 *apiv1beta1.ClusterServiceClass) (*apiv1beta1.ClusterServiceBroker, error) {
	fake.retrieveBrokerByClassMutex.Lock()
	fake.retrieveBrokerByClassArgsForCall = append(fake.retrieveBrokerByClassArgsForCall, struct {
		arg1 *apiv1beta1.ClusterServiceClass
	}{arg1})
	fake.retrieveBrokerByClassMutex.Unlock()
	if fake.RetrieveBrokerByClassStub != nil {
		return fake.RetrieveBrokerByClassStub(arg1)
	} else {
		return fake.retrieveBrokerByClassReturns.result1, fake.retrieveBrokerByClassReturns.result2
	}
}

func (fake *FakeSvcatAPI) RetrieveBrokerByClassCallCount() int {
	fake.retrieveBrokerByClassMutex.RLock()
	defer fake.retrieveBrokerByClassMutex.RUnlock()
	return len(fake.retrieveBrokerByClassArgsForCall)
}

func (fake *FakeSvcatAPI) RetrieveBrokerByClassArgsForCall(i int) *apiv1beta1.ClusterServiceClass {
	fake.retrieveBrokerByClassMutex.RLock()
	defer fake.retrieveBrokerByClassMutex.RUnlock()
	return fake.retrieveBrokerByClassArgsForCall[i].arg1
}

func (fake *FakeSvcatAPI) RetrieveBrokerByClassReturns(result1 *apiv1beta1.ClusterServiceBroker, result2 error) {
	fake.RetrieveBrokerByClassStub = nil
	fake.retrieveBrokerByClassReturns = struct {
		result1 *apiv1beta1.ClusterServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeSvcatAPI) Register(arg1 string, arg2 string) (*apiv1beta1.ClusterServiceBroker, error) {
	fake.registerMutex.Lock()
	fake.registerArgsForCall = append(fake.registerArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.registerMutex.Unlock()
	if fake.RegisterStub != nil {
		return fake.RegisterStub(arg1, arg2)
	} else {
		return fake.registerReturns.result1, fake.registerReturns.result2
	}
}

func (fake *FakeSvcatAPI) RegisterCallCount() int {
	fake.registerMutex.RLock()
	defer fake.registerMutex.RUnlock()
	return len(fake.registerArgsForCall)
}

func (fake *FakeSvcatAPI) RegisterArgsForCall(i int) (string, string) {
	fake.registerMutex.RLock()
	defer fake.registerMutex.RUnlock()
	return fake.registerArgsForCall[i].arg1, fake.registerArgsForCall[i].arg2
}

func (fake *FakeSvcatAPI) RegisterReturns(result1 *apiv1beta1.ClusterServiceBroker, result2 error) {
	fake.RegisterStub = nil
	fake.registerReturns = struct {
		result1 *apiv1beta1.ClusterServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeSvcatAPI) Sync(arg1 string, arg2 int) error {
	fake.syncMutex.Lock()
	fake.syncArgsForCall = append(fake.syncArgsForCall, struct {
		arg1 string
		arg2 int
	}{arg1, arg2})
	fake.syncMutex.Unlock()
	if fake.SyncStub != nil {
		return fake.SyncStub(arg1, arg2)
	} else {
		return fake.syncReturns.result1
	}
}

func (fake *FakeSvcatAPI) SyncCallCount() int {
	fake.syncMutex.RLock()
	defer fake.syncMutex.RUnlock()
	return len(fake.syncArgsForCall)
}

func (fake *FakeSvcatAPI) SyncArgsForCall(i int) (string, int) {
	fake.syncMutex.RLock()
	defer fake.syncMutex.RUnlock()
	return fake.syncArgsForCall[i].arg1, fake.syncArgsForCall[i].arg2
}

func (fake *FakeSvcatAPI) SyncReturns(result1 error) {
	fake.SyncStub = nil
	fake.syncReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSvcatAPI) RetrieveClasses() ([]apiv1beta1.ClusterServiceClass, error) {
	fake.retrieveClassesMutex.Lock()
	fake.retrieveClassesArgsForCall = append(fake.retrieveClassesArgsForCall, struct{}{})
	fake.retrieveClassesMutex.Unlock()
	if fake.RetrieveClassesStub != nil {
		return fake.RetrieveClassesStub()
	} else {
		return fake.retrieveClassesReturns.result1, fake.retrieveClassesReturns.result2
	}
}

func (fake *FakeSvcatAPI) RetrieveClassesCallCount() int {
	fake.retrieveClassesMutex.RLock()
	defer fake.retrieveClassesMutex.RUnlock()
	return len(fake.retrieveClassesArgsForCall)
}

func (fake *FakeSvcatAPI) RetrieveClassesReturns(result1 []apiv1beta1.ClusterServiceClass, result2 error) {
	fake.RetrieveClassesStub = nil
	fake.retrieveClassesReturns = struct {
		result1 []apiv1beta1.ClusterServiceClass
		result2 error
	}{result1, result2}
}

func (fake *FakeSvcatAPI) RetrieveClassByName(arg1 string) (*apiv1beta1.ClusterServiceClass, error) {
	fake.retrieveClassByNameMutex.Lock()
	fake.retrieveClassByNameArgsForCall = append(fake.retrieveClassByNameArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.retrieveClassByNameMutex.Unlock()
	if fake.RetrieveClassByNameStub != nil {
		return fake.RetrieveClassByNameStub(arg1)
	} else {
		return fake.retrieveClassByNameReturns.result1, fake.retrieveClassByNameReturns.result2
	}
}

func (fake *FakeSvcatAPI) RetrieveClassByNameCallCount() int {
	fake.retrieveClassByNameMutex.RLock()
	defer fake.retrieveClassByNameMutex.RUnlock()
	return len(fake.retrieveClassByNameArgsForCall)
}

func (fake *FakeSvcatAPI) RetrieveClassByNameArgsForCall(i int) string {
	fake.retrieveClassByNameMutex.RLock()
	defer fake.retrieveClassByNameMutex.RUnlock()
	return fake.retrieveClassByNameArgsForCall[i].arg1
}

func (fake *FakeSvcatAPI) RetrieveClassByNameReturns(result1 *apiv1beta1.ClusterServiceClass, result2 error) {
	fake.RetrieveClassByNameStub = nil
	fake.retrieveClassByNameReturns = struct {
		result1 *apiv1beta1.ClusterServiceClass
		result2 error
	}{result1, result2}
}

func (fake *FakeSvcatAPI) RetrieveClassByID(arg1 string) (*apiv1beta1.ClusterServiceClass, error) {
	fake.retrieveClassByIDMutex.Lock()
	fake.retrieveClassByIDArgsForCall = append(fake.retrieveClassByIDArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.retrieveClassByIDMutex.Unlock()
	if fake.RetrieveClassByIDStub != nil {
		return fake.RetrieveClassByIDStub(arg1)
	} else {
		return fake.retrieveClassByIDReturns.result1, fake.retrieveClassByIDReturns.result2
	}
}

func (fake *FakeSvcatAPI) RetrieveClassByIDCallCount() int {
	fake.retrieveClassByIDMutex.RLock()
	defer fake.retrieveClassByIDMutex.RUnlock()
	return len(fake.retrieveClassByIDArgsForCall)
}

func (fake *FakeSvcatAPI) RetrieveClassByIDArgsForCall(i int) string {
	fake.retrieveClassByIDMutex.RLock()
	defer fake.retrieveClassByIDMutex.RUnlock()
	return fake.retrieveClassByIDArgsForCall[i].arg1
}

func (fake *FakeSvcatAPI) RetrieveClassByIDReturns(result1 *apiv1beta1.ClusterServiceClass, result2 error) {
	fake.RetrieveClassByIDStub = nil
	fake.retrieveClassByIDReturns = struct {
		result1 *apiv1beta1.ClusterServiceClass
		result2 error
	}{result1, result2}
}

func (fake *FakeSvcatAPI) RetrieveClassByPlan(arg1 *apiv1beta1.ClusterServicePlan) (*apiv1beta1.ClusterServiceClass, error) {
	fake.retrieveClassByPlanMutex.Lock()
	fake.retrieveClassByPlanArgsForCall = append(fake.retrieveClassByPlanArgsForCall, struct {
		arg1 *apiv1beta1.ClusterServicePlan
	}{arg1})
	fake.retrieveClassByPlanMutex.Unlock()
	if fake.RetrieveClassByPlanStub != nil {
		return fake.RetrieveClassByPlanStub(arg1)
	} else {
		return fake.retrieveClassByPlanReturns.result1, fake.retrieveClassByPlanReturns.result2
	}
}

func (fake *FakeSvcatAPI) RetrieveClassByPlanCallCount() int {
	fake.retrieveClassByPlanMutex.RLock()
	defer fake.retrieveClassByPlanMutex.RUnlock()
	return len(fake.retrieveClassByPlanArgsForCall)
}

func (fake *FakeSvcatAPI) RetrieveClassByPlanArgsForCall(i int) *apiv1beta1.ClusterServicePlan {
	fake.retrieveClassByPlanMutex.RLock()
	defer fake.retrieveClassByPlanMutex.RUnlock()
	return fake.retrieveClassByPlanArgsForCall[i].arg1
}

func (fake *FakeSvcatAPI) RetrieveClassByPlanReturns(result1 *apiv1beta1.ClusterServiceClass, result2 error) {
	fake.RetrieveClassByPlanStub = nil
	fake.retrieveClassByPlanReturns = struct {
		result1 *apiv1beta1.ClusterServiceClass
		result2 error
	}{result1, result2}
}

func (fake *FakeSvcatAPI) Deprovision(arg1 string, arg2 string) error {
	fake.deprovisionMutex.Lock()
	fake.deprovisionArgsForCall = append(fake.deprovisionArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.deprovisionMutex.Unlock()
	if fake.DeprovisionStub != nil {
		return fake.DeprovisionStub(arg1, arg2)
	} else {
		return fake.deprovisionReturns.result1
	}
}

func (fake *FakeSvcatAPI) DeprovisionCallCount() int {
	fake.deprovisionMutex.RLock()
	defer fake.deprovisionMutex.RUnlock()
	return len(fake.deprovisionArgsForCall)
}

func (fake *FakeSvcatAPI) DeprovisionArgsForCall(i int) (string, string) {
	fake.deprovisionMutex.RLock()
	defer fake.deprovisionMutex.RUnlock()
	return fake.deprovisionArgsForCall[i].arg1, fake.deprovisionArgsForCall[i].arg2
}

func (fake *FakeSvcatAPI) DeprovisionReturns(result1 error) {
	fake.DeprovisionStub = nil
	fake.deprovisionReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSvcatAPI) InstanceParentHierarchy(arg1 *apiv1beta1.ServiceInstance) (*apiv1beta1.ClusterServiceClass, *apiv1beta1.ClusterServicePlan, *apiv1beta1.ClusterServiceBroker, error) {
	fake.instanceParentHierarchyMutex.Lock()
	fake.instanceParentHierarchyArgsForCall = append(fake.instanceParentHierarchyArgsForCall, struct {
		arg1 *apiv1beta1.ServiceInstance
	}{arg1})
	fake.instanceParentHierarchyMutex.Unlock()
	if fake.InstanceParentHierarchyStub != nil {
		return fake.InstanceParentHierarchyStub(arg1)
	} else {
		return fake.instanceParentHierarchyReturns.result1, fake.instanceParentHierarchyReturns.result2, fake.instanceParentHierarchyReturns.result3, fake.instanceParentHierarchyReturns.result4
	}
}

func (fake *FakeSvcatAPI) InstanceParentHierarchyCallCount() int {
	fake.instanceParentHierarchyMutex.RLock()
	defer fake.instanceParentHierarchyMutex.RUnlock()
	return len(fake.instanceParentHierarchyArgsForCall)
}

func (fake *FakeSvcatAPI) InstanceParentHierarchyArgsForCall(i int) *apiv1beta1.ServiceInstance {
	fake.instanceParentHierarchyMutex.RLock()
	defer fake.instanceParentHierarchyMutex.RUnlock()
	return fake.instanceParentHierarchyArgsForCall[i].arg1
}

func (fake *FakeSvcatAPI) InstanceParentHierarchyReturns(result1 *apiv1beta1.ClusterServiceClass, result2 *apiv1beta1.ClusterServicePlan, result3 *apiv1beta1.ClusterServiceBroker, result4 error) {
	fake.InstanceParentHierarchyStub = nil
	fake.instanceParentHierarchyReturns = struct {
		result1 *apiv1beta1.ClusterServiceClass
		result2 *apiv1beta1.ClusterServicePlan
		result3 *apiv1beta1.ClusterServiceBroker
		result4 error
	}{result1, result2, result3, result4}
}

func (fake *FakeSvcatAPI) InstanceToServiceClassAndPlan(arg1 *apiv1beta1.ServiceInstance) (*apiv1beta1.ClusterServiceClass, *apiv1beta1.ClusterServicePlan, error) {
	fake.instanceToServiceClassAndPlanMutex.Lock()
	fake.instanceToServiceClassAndPlanArgsForCall = append(fake.instanceToServiceClassAndPlanArgsForCall, struct {
		arg1 *apiv1beta1.ServiceInstance
	}{arg1})
	fake.instanceToServiceClassAndPlanMutex.Unlock()
	if fake.InstanceToServiceClassAndPlanStub != nil {
		return fake.InstanceToServiceClassAndPlanStub(arg1)
	} else {
		return fake.instanceToServiceClassAndPlanReturns.result1, fake.instanceToServiceClassAndPlanReturns.result2, fake.instanceToServiceClassAndPlanReturns.result3
	}
}

func (fake *FakeSvcatAPI) InstanceToServiceClassAndPlanCallCount() int {
	fake.instanceToServiceClassAndPlanMutex.RLock()
	defer fake.instanceToServiceClassAndPlanMutex.RUnlock()
	return len(fake.instanceToServiceClassAndPlanArgsForCall)
}

func (fake *FakeSvcatAPI) InstanceToServiceClassAndPlanArgsForCall(i int) *apiv1beta1.ServiceInstance {
	fake.instanceToServiceClassAndPlanMutex.RLock()
	defer fake.instanceToServiceClassAndPlanMutex.RUnlock()
	return fake.instanceToServiceClassAndPlanArgsForCall[i].arg1
}

func (fake *FakeSvcatAPI) InstanceToServiceClassAndPlanReturns(result1 *apiv1beta1.ClusterServiceClass, result2 *apiv1beta1.ClusterServicePlan, result3 error) {
	fake.InstanceToServiceClassAndPlanStub = nil
	fake.instanceToServiceClassAndPlanReturns = struct {
		result1 *apiv1beta1.ClusterServiceClass
		result2 *apiv1beta1.ClusterServicePlan
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeSvcatAPI) IsInstanceFailed(arg1 *apiv1beta1.ServiceInstance) bool {
	fake.isInstanceFailedMutex.Lock()
	fake.isInstanceFailedArgsForCall = append(fake.isInstanceFailedArgsForCall, struct {
		arg1 *apiv1beta1.ServiceInstance
	}{arg1})
	fake.isInstanceFailedMutex.Unlock()
	if fake.IsInstanceFailedStub != nil {
		return fake.IsInstanceFailedStub(arg1)
	} else {
		return fake.isInstanceFailedReturns.result1
	}
}

func (fake *FakeSvcatAPI) IsInstanceFailedCallCount() int {
	fake.isInstanceFailedMutex.RLock()
	defer fake.isInstanceFailedMutex.RUnlock()
	return len(fake.isInstanceFailedArgsForCall)
}

func (fake *FakeSvcatAPI) IsInstanceFailedArgsForCall(i int) *apiv1beta1.ServiceInstance {
	fake.isInstanceFailedMutex.RLock()
	defer fake.isInstanceFailedMutex.RUnlock()
	return fake.isInstanceFailedArgsForCall[i].arg1
}

func (fake *FakeSvcatAPI) IsInstanceFailedReturns(result1 bool) {
	fake.IsInstanceFailedStub = nil
	fake.isInstanceFailedReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeSvcatAPI) IsInstanceReady(arg1 *apiv1beta1.ServiceInstance) bool {
	fake.isInstanceReadyMutex.Lock()
	fake.isInstanceReadyArgsForCall = append(fake.isInstanceReadyArgsForCall, struct {
		arg1 *apiv1beta1.ServiceInstance
	}{arg1})
	fake.isInstanceReadyMutex.Unlock()
	if fake.IsInstanceReadyStub != nil {
		return fake.IsInstanceReadyStub(arg1)
	} else {
		return fake.isInstanceReadyReturns.result1
	}
}

func (fake *FakeSvcatAPI) IsInstanceReadyCallCount() int {
	fake.isInstanceReadyMutex.RLock()
	defer fake.isInstanceReadyMutex.RUnlock()
	return len(fake.isInstanceReadyArgsForCall)
}

func (fake *FakeSvcatAPI) IsInstanceReadyArgsForCall(i int) *apiv1beta1.ServiceInstance {
	fake.isInstanceReadyMutex.RLock()
	defer fake.isInstanceReadyMutex.RUnlock()
	return fake.isInstanceReadyArgsForCall[i].arg1
}

func (fake *FakeSvcatAPI) IsInstanceReadyReturns(result1 bool) {
	fake.IsInstanceReadyStub = nil
	fake.isInstanceReadyReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeSvcatAPI) Provision(arg1 string, arg2 string, arg3 string, arg4 string, arg5 string, arg6 interface{}, arg7 map[string]string) (*apiv1beta1.ServiceInstance, error) {
	fake.provisionMutex.Lock()
	fake.provisionArgsForCall = append(fake.provisionArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
		arg5 string
		arg6 interface{}
		arg7 map[string]string
	}{arg1, arg2, arg3, arg4, arg5, arg6, arg7})
	fake.provisionMutex.Unlock()
	if fake.ProvisionStub != nil {
		return fake.ProvisionStub(arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	} else {
		return fake.provisionReturns.result1, fake.provisionReturns.result2
	}
}

func (fake *FakeSvcatAPI) ProvisionCallCount() int {
	fake.provisionMutex.RLock()
	defer fake.provisionMutex.RUnlock()
	return len(fake.provisionArgsForCall)
}

func (fake *FakeSvcatAPI) ProvisionArgsForCall(i int) (string, string, string, string, string, interface{}, map[string]string) {
	fake.provisionMutex.RLock()
	defer fake.provisionMutex.RUnlock()
	return fake.provisionArgsForCall[i].arg1, fake.provisionArgsForCall[i].arg2, fake.provisionArgsForCall[i].arg3, fake.provisionArgsForCall[i].arg4, fake.provisionArgsForCall[i].arg5, fake.provisionArgsForCall[i].arg6, fake.provisionArgsForCall[i].arg7
}

func (fake *FakeSvcatAPI) ProvisionReturns(result1 *apiv1beta1.ServiceInstance, result2 error) {
	fake.ProvisionStub = nil
	fake.provisionReturns = struct {
		result1 *apiv1beta1.ServiceInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeSvcatAPI) RetrieveInstance(arg1 string, arg2 string) (*apiv1beta1.ServiceInstance, error) {
	fake.retrieveInstanceMutex.Lock()
	fake.retrieveInstanceArgsForCall = append(fake.retrieveInstanceArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.retrieveInstanceMutex.Unlock()
	if fake.RetrieveInstanceStub != nil {
		return fake.RetrieveInstanceStub(arg1, arg2)
	} else {
		return fake.retrieveInstanceReturns.result1, fake.retrieveInstanceReturns.result2
	}
}

func (fake *FakeSvcatAPI) RetrieveInstanceCallCount() int {
	fake.retrieveInstanceMutex.RLock()
	defer fake.retrieveInstanceMutex.RUnlock()
	return len(fake.retrieveInstanceArgsForCall)
}

func (fake *FakeSvcatAPI) RetrieveInstanceArgsForCall(i int) (string, string) {
	fake.retrieveInstanceMutex.RLock()
	defer fake.retrieveInstanceMutex.RUnlock()
	return fake.retrieveInstanceArgsForCall[i].arg1, fake.retrieveInstanceArgsForCall[i].arg2
}

func (fake *FakeSvcatAPI) RetrieveInstanceReturns(result1 *apiv1beta1.ServiceInstance, result2 error) {
	fake.RetrieveInstanceStub = nil
	fake.retrieveInstanceReturns = struct {
		result1 *apiv1beta1.ServiceInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeSvcatAPI) RetrieveInstanceByBinding(arg1 *apiv1beta1.ServiceBinding) (*apiv1beta1.ServiceInstance, error) {
	fake.retrieveInstanceByBindingMutex.Lock()
	fake.retrieveInstanceByBindingArgsForCall = append(fake.retrieveInstanceByBindingArgsForCall, struct {
		arg1 *apiv1beta1.ServiceBinding
	}{arg1})
	fake.retrieveInstanceByBindingMutex.Unlock()
	if fake.RetrieveInstanceByBindingStub != nil {
		return fake.RetrieveInstanceByBindingStub(arg1)
	} else {
		return fake.retrieveInstanceByBindingReturns.result1, fake.retrieveInstanceByBindingReturns.result2
	}
}

func (fake *FakeSvcatAPI) RetrieveInstanceByBindingCallCount() int {
	fake.retrieveInstanceByBindingMutex.RLock()
	defer fake.retrieveInstanceByBindingMutex.RUnlock()
	return len(fake.retrieveInstanceByBindingArgsForCall)
}

func (fake *FakeSvcatAPI) RetrieveInstanceByBindingArgsForCall(i int) *apiv1beta1.ServiceBinding {
	fake.retrieveInstanceByBindingMutex.RLock()
	defer fake.retrieveInstanceByBindingMutex.RUnlock()
	return fake.retrieveInstanceByBindingArgsForCall[i].arg1
}

func (fake *FakeSvcatAPI) RetrieveInstanceByBindingReturns(result1 *apiv1beta1.ServiceInstance, result2 error) {
	fake.RetrieveInstanceByBindingStub = nil
	fake.retrieveInstanceByBindingReturns = struct {
		result1 *apiv1beta1.ServiceInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeSvcatAPI) RetrieveInstances(arg1 string, arg2 string, arg3 string) (*apiv1beta1.ServiceInstanceList, error) {
	fake.retrieveInstancesMutex.Lock()
	fake.retrieveInstancesArgsForCall = append(fake.retrieveInstancesArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.retrieveInstancesMutex.Unlock()
	if fake.RetrieveInstancesStub != nil {
		return fake.RetrieveInstancesStub(arg1, arg2, arg3)
	} else {
		return fake.retrieveInstancesReturns.result1, fake.retrieveInstancesReturns.result2
	}
}

func (fake *FakeSvcatAPI) RetrieveInstancesCallCount() int {
	fake.retrieveInstancesMutex.RLock()
	defer fake.retrieveInstancesMutex.RUnlock()
	return len(fake.retrieveInstancesArgsForCall)
}

func (fake *FakeSvcatAPI) RetrieveInstancesArgsForCall(i int) (string, string, string) {
	fake.retrieveInstancesMutex.RLock()
	defer fake.retrieveInstancesMutex.RUnlock()
	return fake.retrieveInstancesArgsForCall[i].arg1, fake.retrieveInstancesArgsForCall[i].arg2, fake.retrieveInstancesArgsForCall[i].arg3
}

func (fake *FakeSvcatAPI) RetrieveInstancesReturns(result1 *apiv1beta1.ServiceInstanceList, result2 error) {
	fake.RetrieveInstancesStub = nil
	fake.retrieveInstancesReturns = struct {
		result1 *apiv1beta1.ServiceInstanceList
		result2 error
	}{result1, result2}
}

func (fake *FakeSvcatAPI) RetrieveInstancesByPlan(arg1 *apiv1beta1.ClusterServicePlan) ([]apiv1beta1.ServiceInstance, error) {
	fake.retrieveInstancesByPlanMutex.Lock()
	fake.retrieveInstancesByPlanArgsForCall = append(fake.retrieveInstancesByPlanArgsForCall, struct {
		arg1 *apiv1beta1.ClusterServicePlan
	}{arg1})
	fake.retrieveInstancesByPlanMutex.Unlock()
	if fake.RetrieveInstancesByPlanStub != nil {
		return fake.RetrieveInstancesByPlanStub(arg1)
	} else {
		return fake.retrieveInstancesByPlanReturns.result1, fake.retrieveInstancesByPlanReturns.result2
	}
}

func (fake *FakeSvcatAPI) RetrieveInstancesByPlanCallCount() int {
	fake.retrieveInstancesByPlanMutex.RLock()
	defer fake.retrieveInstancesByPlanMutex.RUnlock()
	return len(fake.retrieveInstancesByPlanArgsForCall)
}

func (fake *FakeSvcatAPI) RetrieveInstancesByPlanArgsForCall(i int) *apiv1beta1.ClusterServicePlan {
	fake.retrieveInstancesByPlanMutex.RLock()
	defer fake.retrieveInstancesByPlanMutex.RUnlock()
	return fake.retrieveInstancesByPlanArgsForCall[i].arg1
}

func (fake *FakeSvcatAPI) RetrieveInstancesByPlanReturns(result1 []apiv1beta1.ServiceInstance, result2 error) {
	fake.RetrieveInstancesByPlanStub = nil
	fake.retrieveInstancesByPlanReturns = struct {
		result1 []apiv1beta1.ServiceInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeSvcatAPI) TouchInstance(arg1 string, arg2 string, arg3 int) error {
	fake.touchInstanceMutex.Lock()
	fake.touchInstanceArgsForCall = append(fake.touchInstanceArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 int
	}{arg1, arg2, arg3})
	fake.touchInstanceMutex.Unlock()
	if fake.TouchInstanceStub != nil {
		return fake.TouchInstanceStub(arg1, arg2, arg3)
	} else {
		return fake.touchInstanceReturns.result1
	}
}

func (fake *FakeSvcatAPI) TouchInstanceCallCount() int {
	fake.touchInstanceMutex.RLock()
	defer fake.touchInstanceMutex.RUnlock()
	return len(fake.touchInstanceArgsForCall)
}

func (fake *FakeSvcatAPI) TouchInstanceArgsForCall(i int) (string, string, int) {
	fake.touchInstanceMutex.RLock()
	defer fake.touchInstanceMutex.RUnlock()
	return fake.touchInstanceArgsForCall[i].arg1, fake.touchInstanceArgsForCall[i].arg2, fake.touchInstanceArgsForCall[i].arg3
}

func (fake *FakeSvcatAPI) TouchInstanceReturns(result1 error) {
	fake.TouchInstanceStub = nil
	fake.touchInstanceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSvcatAPI) WaitForInstance(arg1 string, arg2 string, arg3 time.Duration, arg4 *time.Duration) (*apiv1beta1.ServiceInstance, error) {
	fake.waitForInstanceMutex.Lock()
	fake.waitForInstanceArgsForCall = append(fake.waitForInstanceArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 time.Duration
		arg4 *time.Duration
	}{arg1, arg2, arg3, arg4})
	fake.waitForInstanceMutex.Unlock()
	if fake.WaitForInstanceStub != nil {
		return fake.WaitForInstanceStub(arg1, arg2, arg3, arg4)
	} else {
		return fake.waitForInstanceReturns.result1, fake.waitForInstanceReturns.result2
	}
}

func (fake *FakeSvcatAPI) WaitForInstanceCallCount() int {
	fake.waitForInstanceMutex.RLock()
	defer fake.waitForInstanceMutex.RUnlock()
	return len(fake.waitForInstanceArgsForCall)
}

func (fake *FakeSvcatAPI) WaitForInstanceArgsForCall(i int) (string, string, time.Duration, *time.Duration) {
	fake.waitForInstanceMutex.RLock()
	defer fake.waitForInstanceMutex.RUnlock()
	return fake.waitForInstanceArgsForCall[i].arg1, fake.waitForInstanceArgsForCall[i].arg2, fake.waitForInstanceArgsForCall[i].arg3, fake.waitForInstanceArgsForCall[i].arg4
}

func (fake *FakeSvcatAPI) WaitForInstanceReturns(result1 *apiv1beta1.ServiceInstance, result2 error) {
	fake.WaitForInstanceStub = nil
	fake.waitForInstanceReturns = struct {
		result1 *apiv1beta1.ServiceInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeSvcatAPI) RetrievePlans(arg1 *servicecatalog.FilterOptions) ([]apiv1beta1.ClusterServicePlan, error) {
	fake.retrievePlansMutex.Lock()
	fake.retrievePlansArgsForCall = append(fake.retrievePlansArgsForCall, struct {
		arg1 *servicecatalog.FilterOptions
	}{arg1})
	fake.retrievePlansMutex.Unlock()
	if fake.RetrievePlansStub != nil {
		return fake.RetrievePlansStub(arg1)
	} else {
		return fake.retrievePlansReturns.result1, fake.retrievePlansReturns.result2
	}
}

func (fake *FakeSvcatAPI) RetrievePlansCallCount() int {
	fake.retrievePlansMutex.RLock()
	defer fake.retrievePlansMutex.RUnlock()
	return len(fake.retrievePlansArgsForCall)
}

func (fake *FakeSvcatAPI) RetrievePlansArgsForCall(i int) *servicecatalog.FilterOptions {
	fake.retrievePlansMutex.RLock()
	defer fake.retrievePlansMutex.RUnlock()
	return fake.retrievePlansArgsForCall[i].arg1
}

func (fake *FakeSvcatAPI) RetrievePlansReturns(result1 []apiv1beta1.ClusterServicePlan, result2 error) {
	fake.RetrievePlansStub = nil
	fake.retrievePlansReturns = struct {
		result1 []apiv1beta1.ClusterServicePlan
		result2 error
	}{result1, result2}
}

func (fake *FakeSvcatAPI) RetrievePlanByName(arg1 string) (*apiv1beta1.ClusterServicePlan, error) {
	fake.retrievePlanByNameMutex.Lock()
	fake.retrievePlanByNameArgsForCall = append(fake.retrievePlanByNameArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.retrievePlanByNameMutex.Unlock()
	if fake.RetrievePlanByNameStub != nil {
		return fake.RetrievePlanByNameStub(arg1)
	} else {
		return fake.retrievePlanByNameReturns.result1, fake.retrievePlanByNameReturns.result2
	}
}

func (fake *FakeSvcatAPI) RetrievePlanByNameCallCount() int {
	fake.retrievePlanByNameMutex.RLock()
	defer fake.retrievePlanByNameMutex.RUnlock()
	return len(fake.retrievePlanByNameArgsForCall)
}

func (fake *FakeSvcatAPI) RetrievePlanByNameArgsForCall(i int) string {
	fake.retrievePlanByNameMutex.RLock()
	defer fake.retrievePlanByNameMutex.RUnlock()
	return fake.retrievePlanByNameArgsForCall[i].arg1
}

func (fake *FakeSvcatAPI) RetrievePlanByNameReturns(result1 *apiv1beta1.ClusterServicePlan, result2 error) {
	fake.RetrievePlanByNameStub = nil
	fake.retrievePlanByNameReturns = struct {
		result1 *apiv1beta1.ClusterServicePlan
		result2 error
	}{result1, result2}
}

func (fake *FakeSvcatAPI) RetrievePlanByID(arg1 string) (*apiv1beta1.ClusterServicePlan, error) {
	fake.retrievePlanByIDMutex.Lock()
	fake.retrievePlanByIDArgsForCall = append(fake.retrievePlanByIDArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.retrievePlanByIDMutex.Unlock()
	if fake.RetrievePlanByIDStub != nil {
		return fake.RetrievePlanByIDStub(arg1)
	} else {
		return fake.retrievePlanByIDReturns.result1, fake.retrievePlanByIDReturns.result2
	}
}

func (fake *FakeSvcatAPI) RetrievePlanByIDCallCount() int {
	fake.retrievePlanByIDMutex.RLock()
	defer fake.retrievePlanByIDMutex.RUnlock()
	return len(fake.retrievePlanByIDArgsForCall)
}

func (fake *FakeSvcatAPI) RetrievePlanByIDArgsForCall(i int) string {
	fake.retrievePlanByIDMutex.RLock()
	defer fake.retrievePlanByIDMutex.RUnlock()
	return fake.retrievePlanByIDArgsForCall[i].arg1
}

func (fake *FakeSvcatAPI) RetrievePlanByIDReturns(result1 *apiv1beta1.ClusterServicePlan, result2 error) {
	fake.RetrievePlanByIDStub = nil
	fake.retrievePlanByIDReturns = struct {
		result1 *apiv1beta1.ClusterServicePlan
		result2 error
	}{result1, result2}
}

func (fake *FakeSvcatAPI) RetrievePlansByClass(arg1 *apiv1beta1.ClusterServiceClass) ([]apiv1beta1.ClusterServicePlan, error) {
	fake.retrievePlansByClassMutex.Lock()
	fake.retrievePlansByClassArgsForCall = append(fake.retrievePlansByClassArgsForCall, struct {
		arg1 *apiv1beta1.ClusterServiceClass
	}{arg1})
	fake.retrievePlansByClassMutex.Unlock()
	if fake.RetrievePlansByClassStub != nil {
		return fake.RetrievePlansByClassStub(arg1)
	} else {
		return fake.retrievePlansByClassReturns.result1, fake.retrievePlansByClassReturns.result2
	}
}

func (fake *FakeSvcatAPI) RetrievePlansByClassCallCount() int {
	fake.retrievePlansByClassMutex.RLock()
	defer fake.retrievePlansByClassMutex.RUnlock()
	return len(fake.retrievePlansByClassArgsForCall)
}

func (fake *FakeSvcatAPI) RetrievePlansByClassArgsForCall(i int) *apiv1beta1.ClusterServiceClass {
	fake.retrievePlansByClassMutex.RLock()
	defer fake.retrievePlansByClassMutex.RUnlock()
	return fake.retrievePlansByClassArgsForCall[i].arg1
}

func (fake *FakeSvcatAPI) RetrievePlansByClassReturns(result1 []apiv1beta1.ClusterServicePlan, result2 error) {
	fake.RetrievePlansByClassStub = nil
	fake.retrievePlansByClassReturns = struct {
		result1 []apiv1beta1.ClusterServicePlan
		result2 error
	}{result1, result2}
}

func (fake *FakeSvcatAPI) RetrievePlanByClassAndPlanNames(arg1 string, arg2 string) (*apiv1beta1.ClusterServicePlan, error) {
	fake.retrievePlanByClassAndPlanNamesMutex.Lock()
	fake.retrievePlanByClassAndPlanNamesArgsForCall = append(fake.retrievePlanByClassAndPlanNamesArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.retrievePlanByClassAndPlanNamesMutex.Unlock()
	if fake.RetrievePlanByClassAndPlanNamesStub != nil {
		return fake.RetrievePlanByClassAndPlanNamesStub(arg1, arg2)
	} else {
		return fake.retrievePlanByClassAndPlanNamesReturns.result1, fake.retrievePlanByClassAndPlanNamesReturns.result2
	}
}

func (fake *FakeSvcatAPI) RetrievePlanByClassAndPlanNamesCallCount() int {
	fake.retrievePlanByClassAndPlanNamesMutex.RLock()
	defer fake.retrievePlanByClassAndPlanNamesMutex.RUnlock()
	return len(fake.retrievePlanByClassAndPlanNamesArgsForCall)
}

func (fake *FakeSvcatAPI) RetrievePlanByClassAndPlanNamesArgsForCall(i int) (string, string) {
	fake.retrievePlanByClassAndPlanNamesMutex.RLock()
	defer fake.retrievePlanByClassAndPlanNamesMutex.RUnlock()
	return fake.retrievePlanByClassAndPlanNamesArgsForCall[i].arg1, fake.retrievePlanByClassAndPlanNamesArgsForCall[i].arg2
}

func (fake *FakeSvcatAPI) RetrievePlanByClassAndPlanNamesReturns(result1 *apiv1beta1.ClusterServicePlan, result2 error) {
	fake.RetrievePlanByClassAndPlanNamesStub = nil
	fake.retrievePlanByClassAndPlanNamesReturns = struct {
		result1 *apiv1beta1.ClusterServicePlan
		result2 error
	}{result1, result2}
}

func (fake *FakeSvcatAPI) RetrieveSecretByBinding(arg1 *apiv1beta1.ServiceBinding) (*apicorev1.Secret, error) {
	fake.retrieveSecretByBindingMutex.Lock()
	fake.retrieveSecretByBindingArgsForCall = append(fake.retrieveSecretByBindingArgsForCall, struct {
		arg1 *apiv1beta1.ServiceBinding
	}{arg1})
	fake.retrieveSecretByBindingMutex.Unlock()
	if fake.RetrieveSecretByBindingStub != nil {
		return fake.RetrieveSecretByBindingStub(arg1)
	} else {
		return fake.retrieveSecretByBindingReturns.result1, fake.retrieveSecretByBindingReturns.result2
	}
}

func (fake *FakeSvcatAPI) RetrieveSecretByBindingCallCount() int {
	fake.retrieveSecretByBindingMutex.RLock()
	defer fake.retrieveSecretByBindingMutex.RUnlock()
	return len(fake.retrieveSecretByBindingArgsForCall)
}

func (fake *FakeSvcatAPI) RetrieveSecretByBindingArgsForCall(i int) *apiv1beta1.ServiceBinding {
	fake.retrieveSecretByBindingMutex.RLock()
	defer fake.retrieveSecretByBindingMutex.RUnlock()
	return fake.retrieveSecretByBindingArgsForCall[i].arg1
}

func (fake *FakeSvcatAPI) RetrieveSecretByBindingReturns(result1 *apicorev1.Secret, result2 error) {
	fake.RetrieveSecretByBindingStub = nil
	fake.retrieveSecretByBindingReturns = struct {
		result1 *apicorev1.Secret
		result2 error
	}{result1, result2}
}

func (fake *FakeSvcatAPI) ServerVersion() (*version.Info, error) {
	fake.serverVersionMutex.Lock()
	fake.serverVersionArgsForCall = append(fake.serverVersionArgsForCall, struct{}{})
	fake.serverVersionMutex.Unlock()
	if fake.ServerVersionStub != nil {
		return fake.ServerVersionStub()
	} else {
		return fake.serverVersionReturns.result1, fake.serverVersionReturns.result2
	}
}

func (fake *FakeSvcatAPI) ServerVersionCallCount() int {
	fake.serverVersionMutex.RLock()
	defer fake.serverVersionMutex.RUnlock()
	return len(fake.serverVersionArgsForCall)
}

func (fake *FakeSvcatAPI) ServerVersionReturns(result1 *version.Info, result2 error) {
	fake.ServerVersionStub = nil
	fake.serverVersionReturns = struct {
		result1 *version.Info
		result2 error
	}{result1, result2}
}

var _ servicecatalog.SvcatAPI = new(FakeSvcatAPI)
